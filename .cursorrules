# 图片压缩在线工具 .cursorrules  

## 1. 项目核心目标  
构建「轻量、高效、安全」的图片压缩在线工具，支持JPEG/PNG/WebP/AVIF主流格式，提供「智能压缩」（自动优化）与「自定义压缩」（质量/分辨率/尺寸调节）双模式，确保压缩后图片体积缩减60%-90%且视觉损失可控，支持批量处理（≤50张/次）与云端直传（如阿里云OSS、MinIO）。  


## 2. 技术栈选型原则  
- **主流稳定**：优先选择社区活跃（GitHub星标≥10k）、文档完善（官方文档覆盖率≥90%）、维护周期长（LTS版本）的技术。  
- **性能优先**：核心链路（如图像解码/压缩）选择底层优化的工具（如WebAssembly/原生C++绑定）。  
- **可维护性**：避免过度设计，框架/库需支持模块化拆分与类型安全（如TypeScript）。  


## 3. 具体技术栈清单  

### 3.1 前端技术栈  
| 场景                | 工具/库              | 选择理由                                                                 |  
|---------------------|----------------------|--------------------------------------------------------------------------|  
| 框架                | React 18 + TypeScript 5 | 生态成熟、类型安全，配合Vite构建效率高；React社区活跃度（GitHub星标216k+）领先同类框架。 |  
| 构建工具            | Vite 4               | 冷启动速度（~500ms）是Webpack的10倍+，支持ESBuild预构建，适合前端工程化。       |  
| 状态管理            | Zustand 4            | 轻量（体积<3kb）、无样板代码，比Redux更适合中小型状态管理（如压缩参数暂存）。       |  
| UI组件库            | Headless UI + Tailwind CSS 3 | 无样式组件灵活度高，Tailwind原子化CSS支持响应式设计（自动适配手机/PC），减少自定义CSS代码量。 |  
| 图片处理（客户端）   | Canvas API（OffscreenCanvas） + sharp-wasm | OffscreenCanvas实现多线程解码（避免主线程阻塞）；sharp-wasm（WebAssembly版）压缩效率比纯JS方案高3-5倍。 |  
| 网络请求            | Axios 1.5            | 基于Promise，支持请求/响应拦截，配合SWR实现数据缓存（减少重复请求）。              |  


### 3.2 后端技术栈  
| 场景                | 工具/库              | 选择理由                                                                 |  
|---------------------|----------------------|--------------------------------------------------------------------------|  
| 运行时              | Node.js 20（LTS）    | 支持原生ESM，配合Turbo模块加载优化，I/O性能比Node.js 18提升15%+。           |  
| 框架                | NestJS 10            | 基于Express，模块化设计（依赖注入）、强类型（TypeScript），适合企业级API开发（代码可维护性提升40%）。 |  
| 图片处理核心        | Sharp 0.32           | 基于libvips（C++内核），压缩速度是ImageMagick的4倍+，支持主流格式（JPEG/PNG/WebP/AVIF）。 |  
| 文件存储            | MinIO（主）+ 阿里云OSS（备） | MinIO兼容S3协议，支持本地/云端部署（降低云存储成本）；阿里云OSS用于CDN加速（减少用户下载延迟）。 |  
| 异步任务队列        | BullMQ 4             | 基于Redis，支持任务优先级、延迟处理，批量压缩任务通过队列分批次处理（避免服务端阻塞）。 |  
| API文档             | NestJS Swagger       | 自动生成OpenAPI 3.0文档（支持在线调试），减少文档维护成本。                   |  


### 3.3 工具链与DevOps  
| 场景                | 工具/流程            | 规范要求                                                                 |  
|---------------------|----------------------|--------------------------------------------------------------------------|  
| 代码规范            | ESLint（Airbnb规则）+ Prettier | 提交前通过Husky钩子自动执行lint+格式化（禁止不规范代码入库）。                |  
| 版本控制            | Git Flow             | 主分支`main`（生产环境）、`release`（预发布）、`feature/*`（功能开发）、`hotfix/*`（紧急修复）。 |  
| CI/CD               | GitHub Actions       | 前端部署至Vercel（自动触发PR合并）；后端构建Docker镜像（推送到Docker Hub），K8s自动部署。 |  
| 性能监控            | Sentry（前端）+ New Relic（后端） | 前端监控JS错误（响应时间≤5分钟）；后端监控API延迟（P95≤200ms）、QPS（≥1000次/秒）。 |  


## 4. 核心开发规范  

### 4.1 代码质量  
- **类型安全**：前端/后端强制使用TypeScript（接口/函数返回值必须明确类型，禁止`any`类型滥用）。  
- **模块化**：前端按功能拆分组件（如`Uploader`/`CompressPanel`），后端按领域拆分模块（如`image`/`storage`）。  
- **注释规范**：关键函数/复杂逻辑添加JSDoc注释（描述输入输出、异常场景）；公共组件/接口需附使用示例。  


### 4.2 性能优化  
- **前端**：图片上传前通过Web Worker+OffscreenCanvas预解码（主线程耗时≤200ms）；压缩结果列表懒加载（仅加载可见区域）；代码分割（路由级拆分，首屏加载体积≤150kb）。  
- **后端**：Sharp压缩启用内存缓存（LRU Cache，最大容量100MB）；批量任务通过BullMQ分批次处理（单任务超时≤30s）；重复图片通过哈希（MD5）匹配直接返回缓存结果。  


### 4.3 安全规范  
- **输入校验**：限制单张图片大小（≤50MB）、类型（仅允许`image/jpeg`/`image/png`等）；使用`libmagic`库二次验证文件头（防篡改）。  
- **数据存储**：用户上传记录仅保留24小时（定时任务自动清理）；敏感信息（如OSS密钥）通过环境变量管理（禁止硬编码）。  
- **传输安全**：强制HTTPS（TLS 1.3）；前端请求添加CSP头部（限制脚本来源）；后端API启用Rate Limit（50次/分钟/IP）。  


### 4.4 测试要求  
- **单元测试**：核心逻辑（如图像压缩参数计算、任务队列调度）覆盖率≥80%（Jest + Supertest）。  
- **集成测试**：覆盖上传-压缩-下载全流程（Playwright模拟用户操作，验证功能正确性）。  
- **性能测试**：使用k6模拟100并发请求（验证后端QPS与延迟，目标P95≤500ms）。  


## 5. 扩展预留  
- **功能扩展**：预留「压缩历史」接口（需新增MongoDB存储用户记录，当前后端路由已支持）；支持「格式转换」（Sharp已兼容，仅需扩展前端选择面板）。  
- **企业级API**：通过NestJS的`AuthGuard`实现API Key鉴权（当前路由结构支持快速扩展）。  


**注**：所有依赖库版本锁定（`package.json`使用`^`精确到小版本），每月执行依赖安全扫描（`npm audit`或Snyk）；关键路径代码需2人以上评审（PR合并前强制通过Code Review）。  